name: Prod - Build and Deploy
on:
  workflow_dispatch:

jobs:
  test_and_build:
    runs-on: ubuntu-latest
    environment: 'Production'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ vars.FLUTTER_VERSION }}
          channel: 'stable'
      - run: flutter doctor -v
      - run: flutter test
      - shell: bash
        name: Load secrets files
        env:
          APP_SECRETS: ${{ secrets.APP_SECRETS }}
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          echo "$APP_SECRETS" >> settings/app_secrets_prod.json
          echo "$GOOGLE_SERVICES_JSON" >> android/app/src/prod/google-services.json

      - shell: bash 
        name: Determine build version
        run: |
          # Extract the version from pubspec.yaml
          pubspec_version=$(grep '^version:' pubspec.yaml | awk '{print $2}')

          # Define a regex pattern for major.minor.patch format
          pattern="^[0-9]+\.[0-9]+\.[0-9]+$"

          # Check if the version matches the pattern
          if [[ $pubspec_version =~ $pattern ]]; then
            echo "Building with semantic version: $pubspec_version"
          else
            echo "Version $pubspec_version from pubspec.yaml is NOT in the correct format (major.minor.patch)."
            exit 1
          fi
          echo "pubspec_version=$pubspec_version" >> $GITHUB_ENV

      - shell: bash
        name: Extract changelog for version
        run: |
          # Check if the changelog file exists
          changelog_file="CHANGELOG.md"
          if [ ! -f "$changelog_file" ]; then
            echo "Error: $changelog_file does not exist."
            exit 1
          else 
            echo "Changelog file found: $changelog_file"
          fi

          # Find the line number of the heading
          start_line=$(grep -n "^# $pubspec_version" "$changelog_file" | cut -d: -f1)

          # Check if the heading was found
          if [ -z "$start_line" ]; then
            echo "Error: No changelog heading of format '# $pubspec_version' found in '$changelog_file'."
            exit 1
          else 
            echo "Changelog heading for version $pubspec_version found at line: $start_line."
          fi

          # Find the line number of the next heading
          end_line=$(grep -n -A 0 '^# ' "$changelog_file" | grep -A 2 "^$start_line:" | tail -n 1 | cut -d: -f1)

          # If no next heading is found, set end_line to the end of the file
          if [ "$end_line" == "$start_line" ]; then
            end_line=$(wc -l < "$changelog_file")
            echo "No next heading found. Setting end line to end of file: $end_line."
          else 
            echo "Next heading found at line: $end_line."
          fi

          # Extract everything under the heading and before the next heading into the output file
          release_notes_file="CHANGELOG-$pubspec_version.txt"
          sed -n "$((start_line + 1)),$((end_line - 1))p" "CHANGELOG.md" > "$release_notes_file"

          echo "Release notes for version $pubspec_version have been copied to '$release_notes_file':"
          cat "$release_notes_file"
          echo "release_notes_file=$release_notes_file" >> $GITHUB_ENV

      - shell: bash
        name: Check for existing version tag
        run: |
          # Check if a tag already exists for this semantic version
          if git rev-parse "$pubspec_version" >/dev/null 2>&1; then
            echo "Error: A production release commit already exists with tag '$pubspec_version'. Update the semantic version in pubspec.yaml and rerun this pipeline to build a new production release. To re-run a failed release pipeline, delete the tag before re-running."
            exit 1
          else
            tag_version="$pubspec_version"
            echo "Commit ${{ github.sha }} will be tagged with: $tag_version"
          fi  
          
          echo "tag_version=$tag_version" >> $GITHUB_ENV

      - name: Tag commit with version
        uses: actions/github-script@v7
        with: 
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ env.tag_version }}',
              sha: context.sha
            })

      - uses: actions/setup-java@v4
        name: Set up JDK 21
        with:
          distribution: 'corretto' 
          java-version: '21'
          cache: gradle

      - run: flutter build apk --release --flavor=prod --dart-define-from-file=settings/app_settings_prod.json --dart-define-from-file=settings/app_secrets_prod.json --build-number=${{ github.run_number }}
        name: Build prod android apk

      - run: |
          apk_name="quickshop-prod-$pubspec_version.${{ github.run_number }}.apk"
          echo "apk_name=$apk_name" >> $GITHUB_ENV
          mv build/app/outputs/flutter-apk/app-prod-release.apk "build/app/outputs/flutter-apk/$apk_name"
        name: Rename prod apk

      - uses: actions/upload-artifact@v4
        with:
          name: android-prod
          path: |
            build/app/outputs/flutter-apk/${{ env.apk_name }}
            ${{ env.release_notes_file }}

      - run: curl -sL https://firebase.tools | bash
        name: Install Firebase CLI

      - shell: bash
        name: Upload prod apk to Firebase App Distribution
        env:
          SERVICE_ACCOUNT: ${{ secrets.FB_APP_DIST_CREDENTIALS }}
        run: |
          echo "$SERVICE_ACCOUNT" >> google_service_account.json
          export GOOGLE_APPLICATION_CREDENTIALS=google_service_account.json
          firebase --version
          firebase appdistribution:distribute build/app/outputs/flutter-apk/${{ env.apk_name }} --app ${{ vars.ANDROID_FIREBASE_APP_ID }} --release-notes-file ${{ env.release_notes_file }} --groups ${{ vars.APP_TESTER_GROUPS }}